/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { RequestsInterceptorProvider } from './ngx-loader-interceptor.service';
import { ClockLoaderComponent } from './loaders/clock-loader/clock-loader.component';
import { DefaultLoaderComponent } from './loaders/default-loader/default-loader.component';
import { DualRingLoaderComponent } from './loaders/dual-ring-loader/dual-ring-loader.component';
import { EllipsisLoaderComponent } from './loaders/ellipsis-loader/ellipsis-loader.component';
import { FacebookLoaderComponent } from './loaders/facebook-loader/facebook-loader.component';
import { GearLoaderComponent } from './loaders/gear-loader/gear-loader.component';
import { GridLoaderComponent } from './loaders/grid-loader/grid-loader.component';
import { HeartLoaderComponent } from './loaders/heart-loader/heart-loader.component';
import { HourglassLoaderComponent } from './loaders/hourglass-loader/hourglass-loader.component';
import { JellyboxLoaderComponent } from './loaders/jellybox-loader/jellybox-loader.component';
import { MulticircleLoaderComponent } from './loaders/multicircle-loader/multicircle-loader.component';
import { RingLoaderComponent } from './loaders/ring-loader/ring-loader.component';
import { RippleLoaderComponent } from './loaders/ripple-loader/ripple-loader.component';
import { RollerLoaderComponent } from './loaders/roller-loader/roller-loader.component';
import { SpinnerLoaderComponent } from './loaders/spinner-loader/spinner-loader.component';
import { ThreeBounceLoaderComponent } from './loaders/three-bounce-loader/three-bounce-loader.component';
import { WaterWaveLoaderComponent } from './loaders/water-wave-loader/water-wave-loader.component';
import { NgxHttpLoaderComponent } from './ngx-http-loader.component';
import { CommonModule } from '@angular/common';
import { RotatingPlaneComponent } from './loaders/rotating-plane/rotating-plane.component';
var NgxHttpLoaderModule = /** @class */ (function () {
    function NgxHttpLoaderModule() {
    }
    /**
     * @return {?}
     */
    NgxHttpLoaderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxHttpLoaderModule,
            providers: [
                RequestsInterceptorProvider,
            ]
        };
    };
    NgxHttpLoaderModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        NgxHttpLoaderComponent,
                        GearLoaderComponent,
                        GridLoaderComponent,
                        DualRingLoaderComponent,
                        ClockLoaderComponent,
                        DefaultLoaderComponent,
                        EllipsisLoaderComponent,
                        FacebookLoaderComponent,
                        HeartLoaderComponent,
                        HourglassLoaderComponent,
                        RingLoaderComponent,
                        RippleLoaderComponent,
                        RollerLoaderComponent,
                        SpinnerLoaderComponent,
                        WaterWaveLoaderComponent,
                        ThreeBounceLoaderComponent,
                        MulticircleLoaderComponent,
                        JellyboxLoaderComponent,
                        RotatingPlaneComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [NgxHttpLoaderComponent]
                },] }
    ];
    return NgxHttpLoaderModule;
}());
export { NgxHttpLoaderModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWh0dHAtbG9hZGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaHR0cC1sb2FkZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNoRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbURBQW1ELENBQUM7Ozs7Ozs7SUFnQzNFLDJCQUFPOzs7O1FBQ25CLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLFNBQVMsRUFBRTtnQkFDVCwyQkFBMkI7YUFDNUI7U0FDRixDQUFDOzs7Z0JBbENMLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osc0JBQXNCO3dCQUN0QixtQkFBbUI7d0JBQ25CLG1CQUFtQjt3QkFDbkIsdUJBQXVCO3dCQUN2QixvQkFBb0I7d0JBQ3BCLHNCQUFzQjt3QkFDdEIsdUJBQXVCO3dCQUN2Qix1QkFBdUI7d0JBQ3ZCLG9CQUFvQjt3QkFDcEIsd0JBQXdCO3dCQUN4QixtQkFBbUI7d0JBQ25CLHFCQUFxQjt3QkFDckIscUJBQXFCO3dCQUNyQixzQkFBc0I7d0JBQ3RCLHdCQUF3Qjt3QkFDeEIsMEJBQTBCO3dCQUMxQiwwQkFBMEI7d0JBQzFCLHVCQUF1Qjt3QkFDdkIsc0JBQXNCO3FCQUN2QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsWUFBWTtxQkFDYjtvQkFDRCxPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztpQkFDbEM7OzhCQW5ERDs7U0FvRGEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlcXVlc3RzSW50ZXJjZXB0b3JQcm92aWRlciB9IGZyb20gJy4vbmd4LWxvYWRlci1pbnRlcmNlcHRvci5zZXJ2aWNlJztcbmltcG9ydCB7IENsb2NrTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL2Nsb2NrLWxvYWRlci9jbG9jay1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERlZmF1bHRMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvZGVmYXVsdC1sb2FkZXIvZGVmYXVsdC1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IER1YWxSaW5nTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL2R1YWwtcmluZy1sb2FkZXIvZHVhbC1yaW5nLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRWxsaXBzaXNMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvZWxsaXBzaXMtbG9hZGVyL2VsbGlwc2lzLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmFjZWJvb2tMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvZmFjZWJvb2stbG9hZGVyL2ZhY2Vib29rLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR2VhckxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9nZWFyLWxvYWRlci9nZWFyLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JpZExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9ncmlkLWxvYWRlci9ncmlkLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGVhcnRMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvaGVhcnQtbG9hZGVyL2hlYXJ0LWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSG91cmdsYXNzTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL2hvdXJnbGFzcy1sb2FkZXIvaG91cmdsYXNzLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSmVsbHlib3hMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvamVsbHlib3gtbG9hZGVyL2plbGx5Ym94LWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTXVsdGljaXJjbGVMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvbXVsdGljaXJjbGUtbG9hZGVyL211bHRpY2lyY2xlLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmluZ0xvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9yaW5nLWxvYWRlci9yaW5nLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmlwcGxlTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL3JpcHBsZS1sb2FkZXIvcmlwcGxlLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUm9sbGVyTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL3JvbGxlci1sb2FkZXIvcm9sbGVyLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3Bpbm5lckxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9zcGlubmVyLWxvYWRlci9zcGlubmVyLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGhyZWVCb3VuY2VMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvdGhyZWUtYm91bmNlLWxvYWRlci90aHJlZS1ib3VuY2UtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXYXRlcldhdmVMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvd2F0ZXItd2F2ZS1sb2FkZXIvd2F0ZXItd2F2ZS1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5neEh0dHBMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL25neC1odHRwLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdGF0aW5nUGxhbmVDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvcm90YXRpbmctcGxhbmUvcm90YXRpbmctcGxhbmUuY29tcG9uZW50JztcblxuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE5neEh0dHBMb2FkZXJDb21wb25lbnQsXG4gICAgR2VhckxvYWRlckNvbXBvbmVudCxcbiAgICBHcmlkTG9hZGVyQ29tcG9uZW50LFxuICAgIER1YWxSaW5nTG9hZGVyQ29tcG9uZW50LFxuICAgIENsb2NrTG9hZGVyQ29tcG9uZW50LFxuICAgIERlZmF1bHRMb2FkZXJDb21wb25lbnQsXG4gICAgRWxsaXBzaXNMb2FkZXJDb21wb25lbnQsXG4gICAgRmFjZWJvb2tMb2FkZXJDb21wb25lbnQsXG4gICAgSGVhcnRMb2FkZXJDb21wb25lbnQsXG4gICAgSG91cmdsYXNzTG9hZGVyQ29tcG9uZW50LFxuICAgIFJpbmdMb2FkZXJDb21wb25lbnQsXG4gICAgUmlwcGxlTG9hZGVyQ29tcG9uZW50LFxuICAgIFJvbGxlckxvYWRlckNvbXBvbmVudCxcbiAgICBTcGlubmVyTG9hZGVyQ29tcG9uZW50LFxuICAgIFdhdGVyV2F2ZUxvYWRlckNvbXBvbmVudCxcbiAgICBUaHJlZUJvdW5jZUxvYWRlckNvbXBvbmVudCxcbiAgICBNdWx0aWNpcmNsZUxvYWRlckNvbXBvbmVudCxcbiAgICBKZWxseWJveExvYWRlckNvbXBvbmVudCxcbiAgICBSb3RhdGluZ1BsYW5lQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW05neEh0dHBMb2FkZXJDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEh0dHBMb2FkZXJNb2R1bGUgeyBcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Tmd4SHR0cExvYWRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4SHR0cExvYWRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBSZXF1ZXN0c0ludGVyY2VwdG9yUHJvdmlkZXIsXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19