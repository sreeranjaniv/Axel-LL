/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
var NgxHttpLoaderInterceptor = /** @class */ (function () {
    function NgxHttpLoaderInterceptor() {
        this.reqStatus$ = new ReplaySubject(1);
        this.pendingReqCnt = 0;
        this.forceStop = false;
        this.filterUrls = [];
        this.filterUrlPatterns = [];
        this.filterMethods = [];
        this.filterHeaders = [];
    }
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "pendingRequestCnt", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pendingRequestCnt;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "reqStatus", {
        get: /**
         * @return {?}
         */
        function () {
            return this.reqStatus$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "setFilterUrls", {
        set: /**
         * @param {?} urls
         * @return {?}
         */
        function (urls) {
            this.filterUrls = urls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "setUrlPatterns", {
        set: /**
         * @param {?} regx
         * @return {?}
         */
        function (regx) {
            this.filterUrlPatterns = regx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "setFilterMethods", {
        set: /**
         * @param {?} methods
         * @return {?}
         */
        function (methods) {
            this.filterMethods = methods;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "setFilterHeaders", {
        set: /**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            this.filterHeaders = headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHttpLoaderInterceptor.prototype, "setForceStopReq", {
        set: /**
         * @param {?} bool
         * @return {?}
         */
        function (bool) {
            this.forceStop = bool;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.checkIsFilterUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.filterUrls.some(function (x) { return x === url; });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.checkUrlPatterns = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.filterUrlPatterns.some(function (x) { return x.test(url); });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.checkHttpMethod = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.filterMethods.some(function (e) {
            return e.toLowerCase() === req.method.toLowerCase();
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.checkReqHeader = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.filterHeaders.some(function (e) {
            return req.headers.has(e);
        });
    };
    /**
     * @param {?} r
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.isStopReq = /**
     * @param {?} r
     * @return {?}
     */
    function (r) {
        return this.forceStop
            || this.checkIsFilterUrl(r.urlWithParams)
            || this.checkUrlPatterns(r.urlWithParams)
            || this.checkHttpMethod(r)
            || this.checkReqHeader(r);
    };
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    NgxHttpLoaderInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var isNext = this.isStopReq(request);
        if (!isNext) {
            this.pendingReqCnt++;
            if (1 === this.pendingReqCnt) {
                this.reqStatus$.next(true);
            }
        }
        return next.handle(request).pipe(finalize(function () {
            if (!isNext) {
                _this.pendingReqCnt--;
                if (0 === _this.pendingReqCnt) {
                    _this.reqStatus$.next(false);
                }
            }
        }));
    };
    NgxHttpLoaderInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ NgxHttpLoaderInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function NgxHttpLoaderInterceptor_Factory() { return new NgxHttpLoaderInterceptor(); }, token: NgxHttpLoaderInterceptor, providedIn: "root" });
    return NgxHttpLoaderInterceptor;
}());
export { NgxHttpLoaderInterceptor };
if (false) {
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.reqStatus$;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.pendingReqCnt;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.forceStop;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterUrls;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterUrlPatterns;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterMethods;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterHeaders;
}
/** @type {?} */
export var RequestsInterceptorProvider = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: NgxHttpLoaderInterceptor,
        multi: true
    }];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWh0dHAtbG9hZGVyLyIsInNvdXJjZXMiOlsibGliL25neC1sb2FkZXItaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUF3RCxNQUFNLHNCQUFzQixDQUFDO0FBQy9HLE9BQU8sRUFBb0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OzBCQU9qQixJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUM7NkJBQ2xCLENBQUM7eUJBQ0osS0FBSzswQkFDSCxFQUFFO2lDQUNLLEVBQUU7NkJBQ04sRUFBRTs2QkFDRixFQUFFOztJQUVwQyxzQkFBSSx1REFBaUI7Ozs7UUFBckI7WUFDSSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztTQUNqQzs7O09BQUE7SUFFRCxzQkFBSSwrQ0FBUzs7OztRQUFiO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3pDOzs7T0FBQTtJQUVELHNCQUFJLG1EQUFhOzs7OztRQUFqQixVQUFrQixJQUFjO1lBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQzFCOzs7T0FBQTtJQUVELHNCQUFJLG9EQUFjOzs7OztRQUFsQixVQUFtQixJQUFjO1lBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7U0FDakM7OztPQUFBO0lBRUQsc0JBQUksc0RBQWdCOzs7OztRQUFwQixVQUFxQixPQUFpQjtZQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztTQUNoQzs7O09BQUE7SUFFRCxzQkFBSSxzREFBZ0I7Ozs7O1FBQXBCLFVBQXFCLE9BQWlCO1lBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1NBQ2hDOzs7T0FBQTtJQUVELHNCQUFJLHFEQUFlOzs7OztRQUFuQixVQUFvQixJQUFhO1lBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3pCOzs7T0FBQTs7Ozs7SUFFTyxtREFBZ0I7Ozs7Y0FBQyxHQUFXO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssR0FBRyxFQUFULENBQVMsQ0FBQyxDQUFBOzs7Ozs7SUFHdkMsbURBQWdCOzs7O2NBQUMsR0FBVztRQUNoQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDOzs7Ozs7SUFHakQsa0RBQWU7Ozs7Y0FBQyxHQUFxQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztZQUM1QixPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZELENBQUMsQ0FBQzs7Ozs7O0lBR0MsaURBQWM7Ozs7Y0FBQyxHQUFxQjtRQUN4QyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztZQUM1QixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCLENBQUMsQ0FBQzs7Ozs7O0lBR0MsNENBQVM7Ozs7Y0FBQyxDQUFtQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxTQUFTO2VBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7ZUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7ZUFDdEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7ZUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQTs7Ozs7OztJQUdqQyw0Q0FBUzs7Ozs7SUFBVCxVQUNJLE9BQXlCLEVBQ3pCLElBQWlCO1FBRnJCLGlCQW9CQzs7UUFoQkcsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBRXJCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlCO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN0QyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxDQUFDLEtBQUssS0FBSSxDQUFDLGFBQWEsRUFBRTtvQkFDMUIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQy9CO2FBQ0o7U0FDSixDQUFDLENBQUMsQ0FBQztLQUNQOztnQkF6RkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7O21DQVBEOztTQVFhLHdCQUF3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkZyQyxXQUFhLDJCQUEyQixHQUF1QixDQUFDO1FBQzVELE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsV0FBVyxFQUFFLHdCQUF3QjtRQUNyQyxLQUFLLEVBQUUsSUFBSTtLQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBFeGlzdGluZ1Byb3ZpZGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEh0dHBMb2FkZXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcblxyXG4gICAgcHJpdmF0ZSByZXFTdGF0dXMkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XHJcbiAgICBwcml2YXRlIHBlbmRpbmdSZXFDbnQ6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIGZvcmNlU3RvcDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJVcmxzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJVcmxQYXR0ZXJuczogUmVnRXhwW10gPSBbXTtcclxuICAgIHByaXZhdGUgZmlsdGVyTWV0aG9kczogc3RyaW5nW10gPSBbXTtcclxuICAgIHByaXZhdGUgZmlsdGVySGVhZGVyczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBnZXQgcGVuZGluZ1JlcXVlc3RDbnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wZW5kaW5nUmVxdWVzdENudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVxU3RhdHVzKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcVN0YXR1cyQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldEZpbHRlclVybHModXJsczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLmZpbHRlclVybHMgPSB1cmxzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXRVcmxQYXR0ZXJucyhyZWd4OiBSZWdFeHBbXSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyVXJsUGF0dGVybnMgPSByZWd4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXRGaWx0ZXJNZXRob2RzKG1ldGhvZHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJNZXRob2RzID0gbWV0aG9kcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2V0RmlsdGVySGVhZGVycyhoZWFkZXJzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVySGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldEZvcmNlU3RvcFJlcShib29sOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5mb3JjZVN0b3AgPSBib29sO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tJc0ZpbHRlclVybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlclVybHMuc29tZSh4ID0+IHggPT09IHVybClcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrVXJsUGF0dGVybnModXJsOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJVcmxQYXR0ZXJucy5zb21lKHggPT4geC50ZXN0KHVybCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tIdHRwTWV0aG9kKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlck1ldGhvZHMuc29tZShlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGUudG9Mb3dlckNhc2UoKSA9PT0gcmVxLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tSZXFIZWFkZXIocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVySGVhZGVycy5zb21lKGUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxLmhlYWRlcnMuaGFzKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNTdG9wUmVxKHI6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVN0b3BcclxuICAgICAgICAgICAgfHwgdGhpcy5jaGVja0lzRmlsdGVyVXJsKHIudXJsV2l0aFBhcmFtcylcclxuICAgICAgICAgICAgfHwgdGhpcy5jaGVja1VybFBhdHRlcm5zKHIudXJsV2l0aFBhcmFtcylcclxuICAgICAgICAgICAgfHwgdGhpcy5jaGVja0h0dHBNZXRob2QocilcclxuICAgICAgICAgICAgfHwgdGhpcy5jaGVja1JlcUhlYWRlcihyKVxyXG4gICAgfVxyXG5cclxuICAgIGludGVyY2VwdChcclxuICAgICAgICByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgICAgIG5leHQ6IEh0dHBIYW5kbGVyLFxyXG4gICAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgICAgIGNvbnN0IGlzTmV4dCA9IHRoaXMuaXNTdG9wUmVxKHJlcXVlc3QpO1xyXG4gICAgICAgIGlmICghaXNOZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlcUNudCsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKDEgPT09IHRoaXMucGVuZGluZ1JlcUNudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXFTdGF0dXMkLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlzTmV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxQ250LS07XHJcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGhpcy5wZW5kaW5nUmVxQ250KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXFTdGF0dXMkLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSZXF1ZXN0c0ludGVyY2VwdG9yUHJvdmlkZXI6IEV4aXN0aW5nUHJvdmlkZXJbXSA9IFt7XHJcbiAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcclxuICAgIHVzZUV4aXN0aW5nOiBOZ3hIdHRwTG9hZGVySW50ZXJjZXB0b3IsXHJcbiAgICBtdWx0aTogdHJ1ZVxyXG59XTtcclxuIl19