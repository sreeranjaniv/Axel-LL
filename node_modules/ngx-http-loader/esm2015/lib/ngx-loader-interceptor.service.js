/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NgxHttpLoaderInterceptor {
    constructor() {
        this.reqStatus$ = new ReplaySubject(1);
        this.pendingReqCnt = 0;
        this.forceStop = false;
        this.filterUrls = [];
        this.filterUrlPatterns = [];
        this.filterMethods = [];
        this.filterHeaders = [];
    }
    /**
     * @return {?}
     */
    get pendingRequestCnt() {
        return this.pendingRequestCnt;
    }
    /**
     * @return {?}
     */
    get reqStatus() {
        return this.reqStatus$.asObservable();
    }
    /**
     * @param {?} urls
     * @return {?}
     */
    set setFilterUrls(urls) {
        this.filterUrls = urls;
    }
    /**
     * @param {?} regx
     * @return {?}
     */
    set setUrlPatterns(regx) {
        this.filterUrlPatterns = regx;
    }
    /**
     * @param {?} methods
     * @return {?}
     */
    set setFilterMethods(methods) {
        this.filterMethods = methods;
    }
    /**
     * @param {?} headers
     * @return {?}
     */
    set setFilterHeaders(headers) {
        this.filterHeaders = headers;
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    set setForceStopReq(bool) {
        this.forceStop = bool;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    checkIsFilterUrl(url) {
        return this.filterUrls.some(x => x === url);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    checkUrlPatterns(url) {
        return this.filterUrlPatterns.some(x => x.test(url));
    }
    /**
     * @param {?} req
     * @return {?}
     */
    checkHttpMethod(req) {
        return this.filterMethods.some(e => {
            return e.toLowerCase() === req.method.toLowerCase();
        });
    }
    /**
     * @param {?} req
     * @return {?}
     */
    checkReqHeader(req) {
        return this.filterHeaders.some(e => {
            return req.headers.has(e);
        });
    }
    /**
     * @param {?} r
     * @return {?}
     */
    isStopReq(r) {
        return this.forceStop
            || this.checkIsFilterUrl(r.urlWithParams)
            || this.checkUrlPatterns(r.urlWithParams)
            || this.checkHttpMethod(r)
            || this.checkReqHeader(r);
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const isNext = this.isStopReq(request);
        if (!isNext) {
            this.pendingReqCnt++;
            if (1 === this.pendingReqCnt) {
                this.reqStatus$.next(true);
            }
        }
        return next.handle(request).pipe(finalize(() => {
            if (!isNext) {
                this.pendingReqCnt--;
                if (0 === this.pendingReqCnt) {
                    this.reqStatus$.next(false);
                }
            }
        }));
    }
}
NgxHttpLoaderInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ NgxHttpLoaderInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function NgxHttpLoaderInterceptor_Factory() { return new NgxHttpLoaderInterceptor(); }, token: NgxHttpLoaderInterceptor, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.reqStatus$;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.pendingReqCnt;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.forceStop;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterUrls;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterUrlPatterns;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterMethods;
    /** @type {?} */
    NgxHttpLoaderInterceptor.prototype.filterHeaders;
}
/** @type {?} */
export const RequestsInterceptorProvider = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: NgxHttpLoaderInterceptor,
        multi: true
    }];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWh0dHAtbG9hZGVyLyIsInNvdXJjZXMiOlsibGliL25neC1sb2FkZXItaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUF3RCxNQUFNLHNCQUFzQixDQUFDO0FBQy9HLE9BQU8sRUFBb0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUsxQyxNQUFNOzswQkFFbUIsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDOzZCQUNsQixDQUFDO3lCQUNKLEtBQUs7MEJBQ0gsRUFBRTtpQ0FDSyxFQUFFOzZCQUNOLEVBQUU7NkJBQ0YsRUFBRTs7Ozs7SUFFcEMsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7S0FDakM7Ozs7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDekM7Ozs7O0lBRUQsSUFBSSxhQUFhLENBQUMsSUFBYztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztLQUMxQjs7Ozs7SUFFRCxJQUFJLGNBQWMsQ0FBQyxJQUFjO1FBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7S0FDakM7Ozs7O0lBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFpQjtRQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztLQUNoQzs7Ozs7SUFFRCxJQUFJLGdCQUFnQixDQUFDLE9BQWlCO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0tBQ2hDOzs7OztJQUVELElBQUksZUFBZSxDQUFDLElBQWE7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDekI7Ozs7O0lBRU8sZ0JBQWdCLENBQUMsR0FBVztRQUNoQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBOzs7Ozs7SUFHdkMsZ0JBQWdCLENBQUMsR0FBVztRQUNoQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Ozs7OztJQUdqRCxlQUFlLENBQUMsR0FBcUI7UUFDekMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMvQixPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZELENBQUMsQ0FBQzs7Ozs7O0lBR0MsY0FBYyxDQUFDLEdBQXFCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QixDQUFDLENBQUM7Ozs7OztJQUdDLFNBQVMsQ0FBQyxDQUFtQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxTQUFTO2VBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7ZUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7ZUFDdEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7ZUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQTs7Ozs7OztJQUdqQyxTQUFTLENBQ0wsT0FBeUIsRUFDekIsSUFBaUI7O1FBRWpCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUVyQixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQzNDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO29CQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDL0I7YUFDSjtTQUNKLENBQUMsQ0FBQyxDQUFDO0tBQ1A7OztZQXpGSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEZELGFBQWEsMkJBQTJCLEdBQXVCLENBQUM7UUFDNUQsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixXQUFXLEVBQUUsd0JBQXdCO1FBQ3JDLEtBQUssRUFBRSxJQUFJO0tBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEV4aXN0aW5nUHJvdmlkZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4SHR0cExvYWRlckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuXHJcbiAgICBwcml2YXRlIHJlcVN0YXR1cyQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcclxuICAgIHByaXZhdGUgcGVuZGluZ1JlcUNudDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgZm9yY2VTdG9wOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGZpbHRlclVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBwcml2YXRlIGZpbHRlclVybFBhdHRlcm5zOiBSZWdFeHBbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJNZXRob2RzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJIZWFkZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIGdldCBwZW5kaW5nUmVxdWVzdENudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdSZXF1ZXN0Q250O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZXFTdGF0dXMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxU3RhdHVzJC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2V0RmlsdGVyVXJscyh1cmxzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyVXJscyA9IHVybHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldFVybFBhdHRlcm5zKHJlZ3g6IFJlZ0V4cFtdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJVcmxQYXR0ZXJucyA9IHJlZ3g7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNldEZpbHRlck1ldGhvZHMobWV0aG9kczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLmZpbHRlck1ldGhvZHMgPSBtZXRob2RzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXRGaWx0ZXJIZWFkZXJzKGhlYWRlcnM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJIZWFkZXJzID0gaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2V0Rm9yY2VTdG9wUmVxKGJvb2w6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmZvcmNlU3RvcCA9IGJvb2w7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0lzRmlsdGVyVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyVXJscy5zb21lKHggPT4geCA9PT0gdXJsKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tVcmxQYXR0ZXJucyh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlclVybFBhdHRlcm5zLnNvbWUoeCA9PiB4LnRlc3QodXJsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0h0dHBNZXRob2QocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyTWV0aG9kcy5zb21lKGUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpID09PSByZXEubWV0aG9kLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1JlcUhlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJIZWFkZXJzLnNvbWUoZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXEuaGVhZGVycy5oYXMoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc1N0b3BSZXEocjogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcmNlU3RvcFxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrSXNGaWx0ZXJVcmwoci51cmxXaXRoUGFyYW1zKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrVXJsUGF0dGVybnMoci51cmxXaXRoUGFyYW1zKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrSHR0cE1ldGhvZChyKVxyXG4gICAgICAgICAgICB8fCB0aGlzLmNoZWNrUmVxSGVhZGVyKHIpXHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJjZXB0KFxyXG4gICAgICAgIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sXHJcbiAgICAgICAgbmV4dDogSHR0cEhhbmRsZXIsXHJcbiAgICApOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICAgICAgY29uc3QgaXNOZXh0ID0gdGhpcy5pc1N0b3BSZXEocmVxdWVzdCk7XHJcbiAgICAgICAgaWYgKCFpc05leHQpIHtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxQ250Kys7XHJcblxyXG4gICAgICAgICAgICBpZiAoMSA9PT0gdGhpcy5wZW5kaW5nUmVxQ250KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcVN0YXR1cyQubmV4dCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZShmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNOZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdSZXFDbnQtLTtcclxuICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLnBlbmRpbmdSZXFDbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcVN0YXR1cyQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJlcXVlc3RzSW50ZXJjZXB0b3JQcm92aWRlcjogRXhpc3RpbmdQcm92aWRlcltdID0gW3tcclxuICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgdXNlRXhpc3Rpbmc6IE5neEh0dHBMb2FkZXJJbnRlcmNlcHRvcixcclxuICAgIG11bHRpOiB0cnVlXHJcbn1dO1xyXG4iXX0=