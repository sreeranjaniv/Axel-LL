/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { RequestsInterceptorProvider } from './ngx-loader-interceptor.service';
import { ClockLoaderComponent } from './loaders/clock-loader/clock-loader.component';
import { DefaultLoaderComponent } from './loaders/default-loader/default-loader.component';
import { DualRingLoaderComponent } from './loaders/dual-ring-loader/dual-ring-loader.component';
import { EllipsisLoaderComponent } from './loaders/ellipsis-loader/ellipsis-loader.component';
import { FacebookLoaderComponent } from './loaders/facebook-loader/facebook-loader.component';
import { GearLoaderComponent } from './loaders/gear-loader/gear-loader.component';
import { GridLoaderComponent } from './loaders/grid-loader/grid-loader.component';
import { HeartLoaderComponent } from './loaders/heart-loader/heart-loader.component';
import { HourglassLoaderComponent } from './loaders/hourglass-loader/hourglass-loader.component';
import { JellyboxLoaderComponent } from './loaders/jellybox-loader/jellybox-loader.component';
import { MulticircleLoaderComponent } from './loaders/multicircle-loader/multicircle-loader.component';
import { RingLoaderComponent } from './loaders/ring-loader/ring-loader.component';
import { RippleLoaderComponent } from './loaders/ripple-loader/ripple-loader.component';
import { RollerLoaderComponent } from './loaders/roller-loader/roller-loader.component';
import { SpinnerLoaderComponent } from './loaders/spinner-loader/spinner-loader.component';
import { ThreeBounceLoaderComponent } from './loaders/three-bounce-loader/three-bounce-loader.component';
import { WaterWaveLoaderComponent } from './loaders/water-wave-loader/water-wave-loader.component';
import { NgxHttpLoaderComponent } from './ngx-http-loader.component';
import { CommonModule } from '@angular/common';
import { RotatingPlaneComponent } from './loaders/rotating-plane/rotating-plane.component';
export class NgxHttpLoaderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxHttpLoaderModule,
            providers: [
                RequestsInterceptorProvider,
            ]
        };
    }
}
NgxHttpLoaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NgxHttpLoaderComponent,
                    GearLoaderComponent,
                    GridLoaderComponent,
                    DualRingLoaderComponent,
                    ClockLoaderComponent,
                    DefaultLoaderComponent,
                    EllipsisLoaderComponent,
                    FacebookLoaderComponent,
                    HeartLoaderComponent,
                    HourglassLoaderComponent,
                    RingLoaderComponent,
                    RippleLoaderComponent,
                    RollerLoaderComponent,
                    SpinnerLoaderComponent,
                    WaterWaveLoaderComponent,
                    ThreeBounceLoaderComponent,
                    MulticircleLoaderComponent,
                    JellyboxLoaderComponent,
                    RotatingPlaneComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [NgxHttpLoaderComponent]
            },] }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWh0dHAtbG9hZGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaHR0cC1sb2FkZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNoRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUErQjNGLE1BQU07Ozs7SUFDRyxNQUFNLENBQUMsT0FBTztRQUNuQixPQUFPO1lBQ0wsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLEVBQUU7Z0JBQ1QsMkJBQTJCO2FBQzVCO1NBQ0YsQ0FBQzs7OztZQWxDTCxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLHNCQUFzQjtvQkFDdEIsbUJBQW1CO29CQUNuQixtQkFBbUI7b0JBQ25CLHVCQUF1QjtvQkFDdkIsb0JBQW9CO29CQUNwQixzQkFBc0I7b0JBQ3RCLHVCQUF1QjtvQkFDdkIsdUJBQXVCO29CQUN2QixvQkFBb0I7b0JBQ3BCLHdCQUF3QjtvQkFDeEIsbUJBQW1CO29CQUNuQixxQkFBcUI7b0JBQ3JCLHFCQUFxQjtvQkFDckIsc0JBQXNCO29CQUN0Qix3QkFBd0I7b0JBQ3hCLDBCQUEwQjtvQkFDMUIsMEJBQTBCO29CQUMxQix1QkFBdUI7b0JBQ3ZCLHNCQUFzQjtpQkFDdkI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7aUJBQ2I7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7YUFDbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVxdWVzdHNJbnRlcmNlcHRvclByb3ZpZGVyIH0gZnJvbSAnLi9uZ3gtbG9hZGVyLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xvY2tMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvY2xvY2stbG9hZGVyL2Nsb2NrLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGVmYXVsdExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9kZWZhdWx0LWxvYWRlci9kZWZhdWx0LWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHVhbFJpbmdMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvZHVhbC1yaW5nLWxvYWRlci9kdWFsLXJpbmctbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbGxpcHNpc0xvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9lbGxpcHNpcy1sb2FkZXIvZWxsaXBzaXMtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGYWNlYm9va0xvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9mYWNlYm9vay1sb2FkZXIvZmFjZWJvb2stbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHZWFyTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL2dlYXItbG9hZGVyL2dlYXItbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcmlkTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL2dyaWQtbG9hZGVyL2dyaWQtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIZWFydExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9oZWFydC1sb2FkZXIvaGVhcnQtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIb3VyZ2xhc3NMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvaG91cmdsYXNzLWxvYWRlci9ob3VyZ2xhc3MtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBKZWxseWJveExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9qZWxseWJveC1sb2FkZXIvamVsbHlib3gtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNdWx0aWNpcmNsZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9tdWx0aWNpcmNsZS1sb2FkZXIvbXVsdGljaXJjbGUtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSaW5nTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL3JpbmctbG9hZGVyL3JpbmctbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSaXBwbGVMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvcmlwcGxlLWxvYWRlci9yaXBwbGUtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSb2xsZXJMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRlcnMvcm9sbGVyLWxvYWRlci9yb2xsZXItbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGlubmVyTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXJzL3NwaW5uZXItbG9hZGVyL3NwaW5uZXItbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaHJlZUJvdW5jZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy90aHJlZS1ib3VuY2UtbG9hZGVyL3RocmVlLWJvdW5jZS1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFdhdGVyV2F2ZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy93YXRlci13YXZlLWxvYWRlci93YXRlci13YXZlLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmd4SHR0cExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbmd4LWh0dHAtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm90YXRpbmdQbGFuZUNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVycy9yb3RhdGluZy1wbGFuZS9yb3RhdGluZy1wbGFuZS5jb21wb25lbnQnO1xuXG5cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTmd4SHR0cExvYWRlckNvbXBvbmVudCxcbiAgICBHZWFyTG9hZGVyQ29tcG9uZW50LFxuICAgIEdyaWRMb2FkZXJDb21wb25lbnQsXG4gICAgRHVhbFJpbmdMb2FkZXJDb21wb25lbnQsXG4gICAgQ2xvY2tMb2FkZXJDb21wb25lbnQsXG4gICAgRGVmYXVsdExvYWRlckNvbXBvbmVudCxcbiAgICBFbGxpcHNpc0xvYWRlckNvbXBvbmVudCxcbiAgICBGYWNlYm9va0xvYWRlckNvbXBvbmVudCxcbiAgICBIZWFydExvYWRlckNvbXBvbmVudCxcbiAgICBIb3VyZ2xhc3NMb2FkZXJDb21wb25lbnQsXG4gICAgUmluZ0xvYWRlckNvbXBvbmVudCxcbiAgICBSaXBwbGVMb2FkZXJDb21wb25lbnQsXG4gICAgUm9sbGVyTG9hZGVyQ29tcG9uZW50LFxuICAgIFNwaW5uZXJMb2FkZXJDb21wb25lbnQsXG4gICAgV2F0ZXJXYXZlTG9hZGVyQ29tcG9uZW50LFxuICAgIFRocmVlQm91bmNlTG9hZGVyQ29tcG9uZW50LFxuICAgIE11bHRpY2lyY2xlTG9hZGVyQ29tcG9uZW50LFxuICAgIEplbGx5Ym94TG9hZGVyQ29tcG9uZW50LFxuICAgIFJvdGF0aW5nUGxhbmVDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbTmd4SHR0cExvYWRlckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SHR0cExvYWRlck1vZHVsZSB7IFxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hIdHRwTG9hZGVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hIdHRwTG9hZGVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFJlcXVlc3RzSW50ZXJjZXB0b3JQcm92aWRlcixcbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=