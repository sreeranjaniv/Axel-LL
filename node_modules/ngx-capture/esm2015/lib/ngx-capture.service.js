import { Injectable } from '@angular/core';
import html2canvas from 'html2canvas';
import { from, of } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxCaptureService {
    getImage(screen, fullCapture, cropDimensions) {
        let options = {
            logging: false,
        };
        if (!fullCapture && cropDimensions.width > 10 && cropDimensions.height > 10) {
            options = Object.assign(Object.assign({}, options), cropDimensions);
        }
        else if (!fullCapture) {
            return of(null);
        }
        return from(html2canvas(screen, options)
            .then((canv) => {
            const img = canv.toDataURL('image/png');
            return img;
        }, (err) => {
            throw new Error(err);
        })
            .catch((res) => {
            throw new Error(res);
        }));
    }
    // TODO
    downloadImage(img) {
        // this.canvas.nativeElement.src = img;
        // this.downloadLink.nativeElement.href = img;
        // this.downloadLink.nativeElement.download = 'test.png';
        // this.downloadLink.nativeElement.click();
    }
}
NgxCaptureService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxCaptureService_Factory() { return new NgxCaptureService(); }, token: NgxCaptureService, providedIn: "root" });
NgxCaptureService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNhcHR1cmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jYXB0dXJlL3NyYy9saWIvbmd4LWNhcHR1cmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sV0FBVyxNQUFNLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsSUFBSSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLNUMsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixRQUFRLENBQUMsTUFBbUIsRUFBRSxXQUFxQixFQUFFLGNBQW9CO1FBQ3ZFLElBQUksT0FBTyxHQUFHO1lBQ1osT0FBTyxFQUFFLEtBQUs7U0FDZixDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsSUFBSSxjQUFjLENBQUMsS0FBSyxHQUFHLEVBQUUsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUMzRSxPQUFPLG1DQUFRLE9BQU8sR0FBSyxjQUFjLENBQUUsQ0FBQztTQUM3QzthQUFNLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxPQUFPLElBQUksQ0FDVCxXQUFXLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQzthQUN6QixJQUFJLENBQ0gsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNQLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEMsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUNGO2FBQ0EsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztJQUNDLGFBQWEsQ0FBQyxHQUFXO1FBQy9CLHVDQUF1QztRQUN2Qyw4Q0FBOEM7UUFDOUMseURBQXlEO1FBQ3pELDJDQUEyQztJQUM3QyxDQUFDOzs7O1lBdENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IGh0bWwyY2FudmFzIGZyb20gJ2h0bWwyY2FudmFzJztcclxuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hDYXB0dXJlU2VydmljZSB7XHJcbiAgZ2V0SW1hZ2Uoc2NyZWVuOiBIVE1MRWxlbWVudCwgZnVsbENhcHR1cmU/OiBib29sZWFuLCBjcm9wRGltZW5zaW9ucz86IGFueSk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgbG9nZ2luZzogZmFsc2UsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICghZnVsbENhcHR1cmUgJiYgY3JvcERpbWVuc2lvbnMud2lkdGggPiAxMCAmJiBjcm9wRGltZW5zaW9ucy5oZWlnaHQgPiAxMCkge1xyXG4gICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCAuLi5jcm9wRGltZW5zaW9ucyB9O1xyXG4gICAgfSBlbHNlIGlmICghZnVsbENhcHR1cmUpIHtcclxuICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmcm9tKFxyXG4gICAgICBodG1sMmNhbnZhcyhzY3JlZW4sIG9wdGlvbnMpXHJcbiAgICAgICAgLnRoZW4oXHJcbiAgICAgICAgICAoY2FudikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbWcgPSBjYW52LnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbWc7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgKGVycikgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgLmNhdGNoKChyZXMpID0+IHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ET1xyXG4gIHByaXZhdGUgZG93bmxvYWRJbWFnZShpbWc6IHN0cmluZykge1xyXG4gICAgLy8gdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudC5zcmMgPSBpbWc7XHJcbiAgICAvLyB0aGlzLmRvd25sb2FkTGluay5uYXRpdmVFbGVtZW50LmhyZWYgPSBpbWc7XHJcbiAgICAvLyB0aGlzLmRvd25sb2FkTGluay5uYXRpdmVFbGVtZW50LmRvd25sb2FkID0gJ3Rlc3QucG5nJztcclxuICAgIC8vIHRoaXMuZG93bmxvYWRMaW5rLm5hdGl2ZUVsZW1lbnQuY2xpY2soKTtcclxuICB9XHJcbn1cclxuIl19