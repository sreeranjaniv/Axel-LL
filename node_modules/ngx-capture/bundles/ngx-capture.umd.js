(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('html2canvas'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-capture', ['exports', '@angular/core', 'html2canvas', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngx-capture"] = {}, global.ng.core, global.html2canvas, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, html2canvas, rxjs, operators) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var html2canvas__default = /*#__PURE__*/_interopDefaultLegacy(html2canvas);

    var NgxCaptureService = /** @class */ (function () {
        function NgxCaptureService() {
        }
        NgxCaptureService.prototype.getImage = function (screen, fullCapture, cropDimensions) {
            var options = {
                logging: false,
            };
            if (!fullCapture && cropDimensions.width > 10 && cropDimensions.height > 10) {
                options = Object.assign(Object.assign({}, options), cropDimensions);
            }
            else if (!fullCapture) {
                return rxjs.of(null);
            }
            return rxjs.from(html2canvas__default["default"](screen, options)
                .then(function (canv) {
                var img = canv.toDataURL('image/png');
                return img;
            }, function (err) {
                throw new Error(err);
            })
                .catch(function (res) {
                throw new Error(res);
            }));
        };
        // TODO
        NgxCaptureService.prototype.downloadImage = function (img) {
            // this.canvas.nativeElement.src = img;
            // this.downloadLink.nativeElement.href = img;
            // this.downloadLink.nativeElement.download = 'test.png';
            // this.downloadLink.nativeElement.click();
        };
        return NgxCaptureService;
    }());
    NgxCaptureService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function NgxCaptureService_Factory() { return new NgxCaptureService(); }, token: NgxCaptureService, providedIn: "root" });
    NgxCaptureService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var NgxCaptureComponent = /** @class */ (function () {
        function NgxCaptureComponent(captureService) {
            this.captureService = captureService;
            this.resultImage = new i0.EventEmitter();
            this.isDrawing = false;
            this.mouseStart = { x: 0, y: 0 };
            this.cropDimensions = {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
            };
            this.destroy$ = new rxjs.Subject();
        }
        NgxCaptureComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.rect = _this.rectangle.nativeElement;
                _this.captureZone = _this.overlay.nativeElement;
                if (!_this.captureZone) {
                    console.warn('"captureZone" is not set');
                    return;
                }
                _this.captureZone.onmousedown = function (e) { return _this.startCapture(e); };
                _this.captureZone.onmousemove = function (e) { return _this.drawRect(e); };
                _this.captureZone.onmouseup = function () { return _this.endCapture(); };
            }, 2000);
        };
        NgxCaptureComponent.prototype.startCapture = function (e) {
            var mouse = this.setMousePosition(e, true);
            this.isDrawing = true;
            this.cropDimensions = {
                x: mouse.x,
                y: mouse.y,
                width: 0,
                height: 0,
            };
            this.captureZone.style.cursor = 'crosshair';
        };
        NgxCaptureComponent.prototype.drawRect = function (e) {
            if (this.isDrawing) {
                var mouse = this.setMousePosition(e, false);
                this.cropDimensions = {
                    x: mouse.x - this.mouseStart.x < 0 ? mouse.x : this.mouseStart.x,
                    y: mouse.y - this.mouseStart.y < 0 ? mouse.y : this.mouseStart.y,
                    width: Math.abs(mouse.x - this.mouseStart.x),
                    height: Math.abs(mouse.y - this.mouseStart.y),
                };
                this.setRectangle();
            }
        };
        NgxCaptureComponent.prototype.setMousePosition = function (e, isStart) {
            if (isStart === void 0) { isStart = false; }
            var ev = e || window.event; // Moz || IE
            var mouse = { x: 0, y: 0 };
            if (ev.pageX) {
                // Moz
                mouse.x = ev.clientX;
                mouse.y = ev.clientY;
            }
            else if (ev.clientX) {
                // IE
                mouse.x = ev.clientX + document.body.scrollLeft;
                mouse.y = ev.clientY + document.body.scrollTop;
            }
            if (isStart) {
                this.mouseStart.x = mouse.x;
                this.mouseStart.y = mouse.y;
            }
            return mouse;
        };
        NgxCaptureComponent.prototype.endCapture = function () {
            var _this = this;
            this.captureZone.style.cursor = 'default';
            this.isDrawing = false;
            this.captureService
                .getImage(this.target, false, Object.assign(Object.assign({}, this.cropDimensions), { x: this.cropDimensions.x + window.scrollX, y: this.cropDimensions.y + window.scrollY }))
                .pipe(operators.take(1), operators.tap(function (img) {
                _this.resultImage.emit(img);
            }))
                .subscribe();
            this.cropDimensions = {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
            };
            this.setRectangle();
        };
        NgxCaptureComponent.prototype.setRectangle = function () {
            this.rect.style.left = this.cropDimensions.x + 'px';
            this.rect.style.top = this.cropDimensions.y + 'px';
            this.rect.style.width = this.cropDimensions.width + 'px';
            this.rect.style.height = this.cropDimensions.height + 'px';
        };
        return NgxCaptureComponent;
    }());
    NgxCaptureComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ngx-capture',
                    template: "\n    <ng-content></ng-content>\n    <div class=\"overlay\" #over>\n      <div class=\"rectangle\" #rect></div>\n    </div>\n  ",
                    styles: [".overlay{top:0px;left:0px;position:fixed;width:100vw;height:100vh}.rectangle{border:1px solid #ff0000;position:absolute}\n"]
                },] }
    ];
    NgxCaptureComponent.ctorParameters = function () { return [
        { type: NgxCaptureService }
    ]; };
    NgxCaptureComponent.propDecorators = {
        rectangle: [{ type: i0.ViewChild, args: ['rect', { static: true },] }],
        overlay: [{ type: i0.ViewChild, args: ['over', { static: true },] }],
        target: [{ type: i0.Input }],
        resultImage: [{ type: i0.Output }]
    };

    var NgxCaptureModule = /** @class */ (function () {
        function NgxCaptureModule() {
        }
        return NgxCaptureModule;
    }());
    NgxCaptureModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NgxCaptureComponent],
                    imports: [],
                    exports: [NgxCaptureComponent],
                    schemas: [i0.CUSTOM_ELEMENTS_SCHEMA]
                },] }
    ];

    /*
     * Public API Surface of ngx-capture
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxCaptureComponent = NgxCaptureComponent;
    exports.NgxCaptureModule = NgxCaptureModule;
    exports.NgxCaptureService = NgxCaptureService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-capture.umd.js.map
